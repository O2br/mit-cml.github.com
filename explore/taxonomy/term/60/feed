<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xml:base="http://explore.appinventor.mit.edu"  xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
 <title>Explore MIT App Inventor - App Inventor 2</title>
 <link>http://explore.appinventor.mit.edu/tutorial-version/app-inventor-2</link>
 <description></description>
 <language>en</language>
<item>
 <title>WebView Javascript Processor for App Inventor</title>
 <link>http://explore.appinventor.mit.edu/ai2/webview-javascript</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;i&gt;This tutorial is written by Rich Interdonato, MIT Master Trainer.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;App Inventor allows users to write powerful programs using blocks instead of “traditional” programming languages.  It also allows advanced users to include traditional Java code in their apps by means of its new Extensions feature.  What you might not know is that there is another, even older way for you to incorporate “traditional” programming into your apps.  The technique involves using the WebViewer component as a javascript processor, and this blog post will show you how it can be done using a simple example.  In it, an HTML file is sent input text from an App Inventor program, it reverses the text using javascript, and then it sends the result back to the App Inventor program as output that the app can use (show to the user in a Message Dialog).&lt;/p&gt;
&lt;p&gt;Our example requires an HTML file that includes javascript that can reverse text.  The file is included below, and the javascript command that reverses the text is highlighted in &lt;span style=&quot;background-color: yellow;&quot;&gt;yellow&lt;/span&gt;.  The javascript in this file is like the other javascript you might find on the Web, except in one way.  It includes two special App Inventor Only functions, &lt;span style=&quot;background-color: lightgrey;&quot;&gt;window.AppInventor.getWebViewString()&lt;/span&gt; and &lt;span style=&quot;background-color: lightgrey;&quot;&gt;window.AppInventor.setWebViewString()&lt;/span&gt;.  It is these two, App Inventor Only functions that allow your apps to communicate with the javascript that runs inside the WebViewer component.  By using them creatively, you can leverage the vast number of javascript programs that are freely available on the Web, and some of them can be really useful.&lt;/p&gt;
&lt;p&gt;For now, let’s keep things simple and create a file called &lt;span style=&quot;font-family: Courier;&quot;&gt;javascriptWebViewProcessor.html&lt;/span&gt;.  The complete text of the file follows:&lt;/p&gt;
&lt;h3&gt;HTML file (included as media/asset: javascriptWebViewProcessor.html)&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Courier;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;WebView Javascript Processor&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body onload=&quot;processJavascript();&quot;&amp;gt;
&amp;lt;b&amp;gt;his page includes a javascript function that reverses text.&amp;gt;
&amp;lt;p&amp;gt;The javascript function incorporates a special App Inventor feature called &lt;i&gt;window.AppInventor.getWebViewString()&lt;/i&gt;, which allows App Inventor apps to communicate with the WebViewer component&#039;s internal processing of javascript.
&amp;lt;p&amp;gt;This simple example shows how to use the &amp;lt;i&amp;gt;window.AppInventor.getWebViewString() function to pass data to and from the WebViewer component, and thereby an App Inventor app.

&amp;lt;script&amp;gt;
    var result = new Date().toString();
    var appInventorInput = &lt;span style=&quot;background-color: lightgrey;&quot;&gt;window.AppInventor.getWebViewString()&lt;/span&gt;;
        function processJavascript() {
        if (appInventorInput.length &amp;gt; 0) {
            document.write( &quot;WebView InputString received FROM app:&lt;br /&gt;&quot; + appInventorInput );
            &lt;span style=&quot;background-color: yellow;&quot;&gt;result = appInventorInput.split(&quot;&quot;).reverse().join(&quot;&quot;);&lt;/span&gt;
            document.write( &quot;&lt;p&gt;&lt;/p&gt;WebView InputString sending BACK TO app:&amp;lt;br/&amp;gt;&quot; +
            result );
        } else {
            document.write( &quot;No WebView InputString set by app at: &amp;lt;br/&amp;gt;&quot; + result );
        }
        &lt;span style=&quot;background-color: lightgrey;&quot;&gt;window.AppInventor.setWebViewString( result )&lt;/span&gt;;
    }
&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Designer&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/webviewer-designer.png&quot; style=&quot;display:block; margin:auto; width: 80%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once the &lt;span style=&quot;font-family: Courier;&quot;&gt; javascriptWebViewProcessor.html&lt;/span&gt; has been created, make a new App Inventor app called SimpleWebviewerJavascriptProcessor, and upload the HTML file as an app media asset.  Add a HorizontalArrangement with a:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;i&gt;TextBox&lt;/i&gt; named &lt;i&gt;StringToBeProcessedByJavascriptFile&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Button&lt;/i&gt; named &lt;i&gt;btnProcess&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Also, using the default names and properties for each, add a:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;WebViewer component&lt;/li&gt;
&lt;li&gt;Notifier component&lt;/li&gt;
&lt;li&gt;Clock component&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;
Blocks Overview&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/webviewer-blocks-overview.png&quot; style=&quot;display:block; margin:auto; width: 100%;&quot; /&gt;&lt;br /&gt;
As you can see, the blocks for this app are quite simple.  There are 4 variables and 3 event handlers.  Each will be explained in individual sections.&lt;/p&gt;
&lt;h4&gt;Variables&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/webviewer-variables.png&quot; style=&quot;display:block; margin:auto; width: 80%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;processingIntervalMillis:&lt;/strong&gt; sets the frequency of calls to the WebViewer component from the App Inventor app&lt;br /&gt;&lt;strong&gt;debugMode:&lt;/strong&gt; used to specify the location of the HTML file that is used by the WebViewer because App Inventor apps use different directories for development and running apps&lt;br /&gt;&lt;strong&gt;currentProcessingDurationMillis:&lt;/strong&gt; tracks the amount of time (in milliseconds) that the WebViewer has been working as it processes the javascript in the HTML file&lt;br /&gt;&lt;strong&gt;maximumProcessingDurationMillis:&lt;/strong&gt; controls the number of milliseconds that the app will wait for a reply from the WebViewer component before determining that it is unresponsive&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;Screen1.Initialize&lt;/span&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/webviewer-initialize.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This block sets the &lt;i&gt;WebViewer1.HomeUrl&lt;/i&gt; property to either &lt;span style=&quot;font-family: Courier;&quot;&gt;file:///mnt/sdcard/AppInventor/assets/javascriptWebViewProcessor.html&lt;/span&gt; (when &lt;strong&gt;debugMode&lt;/strong&gt; is TRUE), or &lt;span style=&quot;font-family: Courier;&quot;&gt;file:///android_asset/javascriptWebViewProcessor.html&lt;/span&gt; (when &lt;strong&gt;debugMode&lt;/strong&gt; is FALSE).  It then sets the &lt;i&gt;Clock1.TimerInterval&lt;/i&gt; property to the value of &lt;strong&gt;processingIntervalMillis&lt;/strong&gt; (50ms), and disables the &lt;i&gt;Clock1&lt;/i&gt; component so it does not start triggering events as soon as the app starts.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;btnProcess.Click&lt;/span&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/webviewer-btnprocess.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;span style=&quot;font-family: Courier;&quot;&gt;javascriptWebViewProcessor.html&lt;/span&gt; file processing begins once the user activates the app.  This activation is captured by the &lt;i&gt;btnProcess.Click&lt;/i&gt; event handler block, which sets the &lt;i&gt;WebViewer1.WebViewString&lt;/i&gt; component to the value of the &lt;i&gt;StringToBeProceesedByJavascriptFile.Text&lt;/i&gt;.  Then the &lt;i&gt;WebViewer1.GoHome&lt;/i&gt; procedure is called, which causes the WebViewer to load the &lt;span style=&quot;font-family: Courier;&quot;&gt;javascriptWebViewProcessor.html&lt;/span&gt; page, thereby starting the javascript processing.  Once the javascript processing has begun, the app needs to monitor progress, and so the &lt;i&gt;Clock1.TimerEnabled&lt;/i&gt; property is set to TRUE.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;Clock1.Timer&lt;/span&gt;&lt;br /&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/webviewer-timer.png&quot; style=&quot;display:block; margin:auto; width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As soon as the &lt;i&gt;Clock1.TimerEnabled property&lt;/i&gt; is set to TRUE, the &lt;i&gt;Clock1.Timer&lt;/i&gt; event begins to fire at an interval set by the &lt;strong&gt;processingIntervalMillis&lt;/strong&gt; value in the &lt;i&gt;Screen1.Initialize&lt;/i&gt; event.  Each time the &lt;i&gt;Clock1.Timer&lt;/i&gt; event is triggered, the app &lt;u&gt;first&lt;/u&gt; checks to see if the value of the &lt;i&gt;WebViewer1.WebViewString&lt;/i&gt; is the same as the &lt;i&gt;StringToBeProcessedByJavascriptFile.Text&lt;/i&gt;.  If they are the same, this means that the WebViewer component is still processing the javascript, and it increments the &lt;strong&gt;currentProcessingDurationMillis&lt;/strong&gt; by the &lt;strong&gt;processingIntervalMillis&lt;/strong&gt; and then checks to see if the new &lt;strong&gt;currentProcessingDurationMillis&lt;/strong&gt; value is greater than or equal to the &lt;strong&gt;maximumProcessingDurationMillis&lt;/strong&gt; value.  If it is, the app changes to value of the &lt;i&gt;WebViewer1.WebViewString&lt;/i&gt; property (by concatenating adds the text “ TIMEOUT” to the current value of &lt;i&gt;StringToBeProcessedByJavascriptFile.Text&lt;/i&gt; to make it different from the value of the  &lt;i&gt;StringToBeProcessedByJavascriptFile.Text&lt;/i&gt;, and thereby ensure that the next time the &lt;i&gt;Clock1.Timer&lt;/i&gt; event is triggered, the &lt;span style=&quot;text-decoration: underline;&quot;&gt;first&lt;/span&gt; check will fail.&lt;/p&gt;
&lt;p&gt;As soon as the &lt;span style=&quot;text-decoration: underline;&quot;&gt;first&lt;/span&gt; check fails (i.e. &lt;i&gt;WebViewer1.WebViewString&lt;/i&gt; differs from &lt;i&gt;StringToBeProcessedByJavascriptFile.Text&lt;/i&gt;), the app will reset the &lt;i&gt;StringToBeProcessedByJavascriptFile.Text&lt;/i&gt; to an empty string (“”), set &lt;i&gt;Clock1.TimerEnabled&lt;/i&gt; to FALSE, and then display a message to the user in a Message Dialog that includes the result of the javascript processing, as well as how long it took to do it.  The output of the processing is available to the app in the &lt;i&gt;WebViewer1.WebViewString&lt;/i&gt; property, which is set inside the javascript processing file.  As a final “cleanup” action, the &lt;strong&gt;currentProcessingDurationMillis&lt;/strong&gt; is reset to 0, so the next time the user clicks on &lt;i&gt;btnProcess&lt;/i&gt;, the app will properly calculate the processing duration.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;In this article, we have explored how the WebViewer component can be used to process javascript in your App Inventor apps.  Our example was simple, but it demonstrated the fact that App Inventor can communicate with running javascript, and this provides you with a foundation for more advanced and useful javascript processing.  There is a LOT of javascript code available on the web, and some of it can be used immediately by you to implement advanced features in your apps.  In my next blog post, I will explore an advanced application of WebView javascript processing that you can use right away to freely make your apps much more secure.  Until then, keep inventing!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-2&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;WebViewer&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Thu, 05 Oct 2017 19:56:34 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">919 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Hello Codi!</title>
 <link>http://explore.appinventor.mit.edu/ai2/hello-codi</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;div style=&quot;padding: 10px;&quot;&gt;
&lt;h2 class=&quot;ai-header&quot;&gt;Building your first app: HelloCodi&lt;/h2&gt;
&lt;p&gt;Now that you&#039;ve set up your computer and device, and you&#039;ve learned how the Designer and the Blocks Editor work, you are ready to build the HelloCodi app. At this point, you should have the Designer or Blocks Editor open in your browser, and either an Android device or an Android emulator connected to the Blocks Editor. (See &lt;a href=&quot;/ai2/setup&quot;&gt;Setup Instructions for App Inventor 2&lt;/a&gt; if you do not have these things running.)  Choose “Start a New Project” from the Projects menu and name it HelloCodi.&lt;/p&gt;
&lt;h3&gt;HelloCodi: tap the bee, hear the bee buzz!&lt;/h3&gt;
&lt;p&gt;HelloCodi is a simple app that you can build in a very short time. You create a button that has a picture of Codi the bee on it, and then program the button so that when it is clicked the phone will make a buzzing sound.&lt;/p&gt;
&lt;p&gt;To build HelloCodi, you&#039;ll need an image file of Codi the bee. Download these files to your computer by clicking the following links. To download: after clicking a link, right click on the image and select &quot;Save As.&quot; Save the file onto your desktop or downloads folder, or anywhere that you can easily find it later.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Code picture: &lt;a href=&quot;/sites/all/files/ai2tutorials/helloCodi/codi.jpg&quot;&gt; codi.jpg&lt;/a&gt; (Right-click and Save)&lt;/li&gt;
&lt;li&gt;Bee sound: &lt;a href=&quot;/sites/all/files/ai2tutorials/helloCodi/Bee-Sound.mp3&quot;&gt; Bee-Sound.mp3&lt;/a&gt; (Right-click and Save)&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Select components to design your app&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/button.png&quot; style=&quot;float:left; width: 15%; border: grey solid 1px; margin-right: 10px; margin-bottom: 10px;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;width: 50%;&quot;&gt;The App Inventor &lt;b&gt;Components&lt;/b&gt; are located on the left hand side of the &lt;em&gt;Designer Window&lt;/em&gt; under the title &lt;b&gt;Palette&lt;/b&gt;. Components are the basic elements you use to make apps on the Android phone. They&#039;re like the ingredients in a recipe. Some components are very simple, like a &lt;b&gt;Label&lt;/b&gt; component, which just shows text on the screen, or a &lt;b&gt;Button&lt;/b&gt; component (#1 left) that you tap to initiate an action. &lt;/p&gt;
&lt;p style=&quot;width: 50%;&quot;&gt;Other components are more elaborate: a drawing &lt;b&gt;Canvas&lt;/b&gt; that can hold still images or animations, an &lt;b&gt;Accelerometer&lt;/b&gt; sensor that works like a Wii controller and detects when you move or shake the phone, components that send text messages, components that play music and video, components that get information from Web sites, and so on.&lt;/p&gt;
&lt;p style=&quot;clear:both;&quot;&gt;To use a component in your app, you need to click and drag it onto the viewer in the middle of the &lt;b&gt;Designer&lt;/b&gt;. When you add a component to the &lt;b&gt;Viewer&lt;/b&gt; (#1 below), it will also appear in the components list on the right hand side of the Viewer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Components&lt;/strong&gt; (#2 below) have adjustable properties. These properties change the way the component appears or behaves within the app. To view and change the &lt;strong&gt;Properties&lt;/strong&gt; of a component (#3 below), you must first select the desired component in your list of components.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/viewer.png&quot; style=&quot;border: grey solid 1px; margin:auto; width:50%; display: block;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Steps for selecting components and setting properties&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;color:green;&quot;&gt;HelloCodi&lt;/span&gt; will have a &lt;b&gt;Button&lt;/b&gt; component that displays the image of the bee you downloaded earlier. To accomplish this:&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Step 1a&lt;/b&gt;. From the &lt;b&gt;User Interface&lt;/b&gt; palette, drag and drop the &lt;b&gt;Button&lt;/b&gt; component to Screen1 (#1). &lt;/p&gt;
&lt;p&gt;&lt;b&gt;Step 1b&lt;/b&gt;.To give the button the image of the bee, in the &lt;b&gt;Properties&lt;/b&gt; pane, under Image, click on the text &lt;em&gt;&quot;None...&quot;&lt;/em&gt; and click &lt;em&gt;&quot;Upload File...&quot;&lt;/em&gt; (#2). A window will pop up to let you choose the image file. Click &quot;Browse&quot; and then navigate to the location of the &lt;em&gt;codi.jpg&lt;/em&gt; file you downloaded earlier (#3). Click the &lt;em&gt;codi.jpg&lt;/em&gt; file, click &quot;Open&quot;, and then click &quot;OK&quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/upload.png&quot; style=&quot;border: grey solid 1px; margin:auto; width:70%; display: block;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p style=&quot;width: 70%;&quot;&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/text-properties.png&quot; style=&quot;float:right; width: 25%; border: grey solid 1px; margin-left: 10px; margin-bottom: 10px;&quot; /&gt;&lt;b&gt;Step 2&lt;/b&gt;. Change the Button&#039;s &lt;b&gt;Text&lt;/b&gt; property:&lt;br /&gt;Delete &quot;Text for Button1&quot;, leaving the Button&#039;s text property blank so that there is no writing over the bee image.&lt;/p&gt;
&lt;hr style=&quot;clear:both;&quot; /&gt;&lt;p&gt;&lt;b&gt;Step 3&lt;/b&gt;. From the &lt;b&gt;User Interface&lt;/b&gt; palette, drag and drop the &lt;b&gt;Label&lt;/b&gt; component to the Viewer (#1), placing it below the picture of the bee. It will appear under your list of components as &lt;strong&gt;Label1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Under the &lt;b&gt;Properties&lt;/b&gt; pane, change the &lt;/p&gt;
&lt;ul style=&quot;list-style: none;&quot;&gt;&lt;li&gt;&lt;b&gt;(2) Text&lt;/b&gt; property of Label1 to read &quot;Touch the Bee&quot;. You&#039;ll see the text change in the Designer and on your device.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;(3) FontSize&lt;/b&gt; to 30.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;(4) BackgroundColor&lt;/b&gt; of Label1 by clicking on the box. You can change it to any color you like.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;(5) TextColor&lt;/b&gt; to any color you like. (Note: if BackgroundColor and TextColor are the same, you will not be able to read your text!)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; Here, the background color is set to aqua and the text color is set blue. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/label.png&quot; style=&quot;border: grey solid 1px; margin:auto; width:70%; display: block;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;b&gt;Step 4&lt;/b&gt;. Under Palette, click on the &lt;b&gt;Media&lt;/b&gt; drawer and drag out a &lt;b&gt;Sound&lt;/b&gt; component and place it in the Viewer (#1). Wherever you drop it, it will appear in the area at the bottom of the Viewer marked &lt;b&gt;Non-visible components&lt;/b&gt;. Under the Media pane, Click Upload File... (#2) Browse to the location of the &lt;em&gt;Bee-Sound.mp3&lt;/em&gt; file that you downloaded earlier and upload it to this project (#3). Under the Properties pane, see that the Source property currently says None.... Click the word None... to change the Sound1 component&#039;s Source to &lt;em&gt;Bee-Sound.mp3&lt;/em&gt; (#4).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/sound.png&quot; style=&quot;border: grey solid 1px; margin:auto; width:70%; display: block;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Programming with the Blocks Editor&lt;/h3&gt;
&lt;p&gt;So far you have been arranging your app&#039;s screen and components in the &lt;em&gt;Designer&lt;/em&gt;, which is in a web browser window. To start programming the behavior of the app, you need to go to the &lt;em&gt;Blocks Editor&lt;/em&gt;. Click the Blocks button in the upper right of your screen to go to the Blocks Editor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/blocks.png&quot; style=&quot;border: grey solid 1px; margin:auto; width:90%; display: block;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once you have the Blocks Editor in front of you, continue to the next step to start programming your app with blocks.&lt;/p&gt;
&lt;h3&gt;Playing the Sound&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Step 1&lt;/b&gt;. On the left side of the Blocks Editor, click the &lt;b&gt;Button1&lt;/b&gt; drawer to open it. Drag and drop the &lt;span class=&quot;blocks&quot;&gt;Button1.Click&lt;/span&gt; block in the work area (the open area on the right). &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/buttonblocks.png&quot; style=&quot;border: grey solid 1px; margin:auto; width:50%; display: block;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Those mustard yellow blocks are called &lt;b&gt;event handler&lt;/b&gt; blocks. The event handler blocks specifiy how the phone should respond to certain events: a button has been pressed, the phone is being shaken, the user is dragging her finger over a canvas, etc. &lt;span class=&quot;eventblock&quot;&gt;when Button1.Click&lt;/span&gt; is an event handler.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Step 2a&lt;/b&gt;. Click the &lt;b&gt;Sound1&lt;/b&gt; drawer and drag the &lt;span class=&quot;blocks&quot;&gt;Sound1.Play&lt;/span&gt; block and connect it to the &quot;do&quot; section of the &lt;span class=&quot;blocks&quot;&gt;when Button1.Click&lt;/span&gt; block. The blocks connect together like puzzle pieces and you can hear a clicking sound when they connect.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/soundblocks.png&quot; style=&quot;border: grey solid 1px; margin:auto; width:50%; display: block;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The purple blocks are called &lt;b&gt;command&lt;/b&gt; blocks, which are placed in the body of event handlers.  When an event handler is executed, it runs the sequence of commands in its body.  A command is a block that specifies an action to be performed (e.g., playing sound) when the event (e.g., pressing Button1) is triggered.&lt;/p&gt;
&lt;p&gt;Your blocks should look like this at this point:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/button1click.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now you can see that the &lt;b&gt;command block&lt;/b&gt; is in the &lt;b&gt;event handler&lt;/b&gt;. This set of blocks means; &quot;when Button1 is clicked, Sound1 will play.&quot;  The event handler is like a category of action (e.g., a button is being clicked), and the command specifies the type of action and the details of the action (e.g., playing a sound).&lt;/p&gt;
&lt;p&gt;You can read more about the blocks and how they work here: &lt;a href=&quot;/ai2/support/blocks&quot;&gt;Understanding Blocks in App Inventor 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Try It! When you click the button you should hear Codi buzz. Congratulations, your first app is running! &lt;/p&gt;
&lt;pre class=&quot;box&quot;&gt;Note: there is a known issue with the Sound component on some devices. If you see an &quot;OS Error&quot; and the sound does not play - or is very delayed in playing, go back into the Designer and try using a Player component (found under Media) instead of the Sound component.&lt;/pre&gt;&lt;h3&gt;Packaging your app&lt;/h3&gt;
&lt;p&gt;While your device (emulator or phone/tablet) has been connected to App Inventor, your app has been running in real time on your device. If you disconnect the emulator/phone/tablet from the Blocks Editor, the app will vanish. You can always make it return by reconnecting the device. To have an app running without being connected to App Inventor, you must &quot;&lt;b&gt;package&lt;/b&gt;&quot; the app to produce an application package (apk file).&lt;/p&gt;
&lt;p&gt;To &quot;package&quot; the app to your phone or to send to someone else, click the &lt;strong&gt;Build&lt;/strong&gt; tab at the top of the screen. Under Build, here are two options available for you to choose from:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/package.png&quot; style=&quot;border: grey solid 1px; margin:auto; width:50%; display: block;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;1. &lt;b&gt;App (provide QR code):&lt;/b&gt; You can generate a Barcode (a QR Code), which you can use to install the app on a phone or tablet that has a camera, with the aid of a barcode scanner, like the ZXing barcode scanner (freely available in Google Play). &lt;/p&gt;
&lt;p style=&quot;color:red;&quot;&gt;Note: this barcode works only for your own device because it is associated with your Google account. If you want to share your app with others via barcode, you&#039;ll need to download the .apk file to your computer and use a third-party software to convert the file into a barcode. More information can be found &lt;a href=&quot;/ai2/share&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;2. &lt;b&gt;App (save to my computer):&lt;/b&gt; You can download the app to your computer as an apk file, which you can distribute and share as you like by manually installing it on other devices. (sometimes called &lt;a href=&quot;http://www.techrepublic.com/blog/smartphones/how-to-side-load-apps-on-your-android-device/3114&quot; target=&quot;blank&quot;&gt;&quot;side loading&quot;&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Review&lt;/h4&gt;
&lt;p&gt;Here are the key ideas covered so far:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You build apps by selecting components (ingredients) and then telling them what to do and when to do it.&lt;/li&gt;
&lt;li&gt;You use the &lt;strong&gt;Designer&lt;/strong&gt; to select components and set each component&#039;s properties. Some components are visible and some aren&#039;t.&lt;/li&gt;
&lt;li&gt;You can add media (sounds and images) to apps by uploading them from your computer.&lt;/li&gt;
&lt;li&gt;You use the &lt;strong&gt;Blocks Editor&lt;/strong&gt; to assemble blocks that define the components&#039; behavior&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;eventblock&quot;&gt;when ... do ...&lt;/span&gt; blocks define &lt;em&gt;event handlers&lt;/em&gt;, that tell components what to do &lt;em&gt;when&lt;/em&gt; something happens.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;blocks&quot;&gt;call ...&lt;/span&gt; blocks tell components to do things.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Scan the Sample App to your Phone&lt;/h4&gt;
&lt;p&gt;Scan the following barcode onto your phone to install and run the sample app.
&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/helloCodi/HelloCodiBarcode.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Or &lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/ai2tutorials/helloCodi/HelloCodi.apk&quot;&gt;download the apk&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Download Source Code&lt;/h4&gt;
&lt;p&gt;If you&#039;d like to work with this sample in App Inventor, download the &lt;a href=&quot;/sites/all/files/ai2tutorials/helloCodi/HelloCodi.aia&quot;&gt;source code&lt;/a&gt; to your computer, then open App Inventor, click &lt;b&gt;Projects&lt;/b&gt;, choose &lt;b&gt;Import project (.aia) from my computer...&lt;/b&gt;, and select the source code you just downloaded.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Next steps&lt;/h4&gt;
&lt;p&gt;Now that you know the basics of how App Inventor works we recommend you:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Complete additional &lt;a href=&quot;/ai2/tutorials&quot;&gt;Tutorials&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Review the &lt;a href=&quot;/library&quot;&gt;User Guide for App Inventor 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Join the &lt;a href=&quot;/forums&quot;&gt;User Discussion Forum&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read the guide to &lt;a href=&quot;/ai2/support/blocks&quot;&gt;Understanding Blocks&lt;/a&gt;&lt;a&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or, if you&#039;ve been using the emulator and want to start using your phone, you can &lt;a href=&quot;/ai2/setup&quot;&gt;set up your Android device&lt;/a&gt; to build apps.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;ai-box&quot;&gt;Something not working right? Visit the &lt;a href=&quot;/ai2/support/troubleshooting&quot;&gt;troubleshooting page&lt;/a&gt;, or check the &lt;a href=&quot;/forums&quot;&gt;App Inventor User Forum&lt;/a&gt; for help.&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-2&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Basic&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Tue, 12 Sep 2017 18:45:51 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">909 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>LEGO EV3 Color Search</title>
 <link>http://explore.appinventor.mit.edu/ai2/lego-ev3-color-search</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;This tutorial shows you how to build a mobile app that instructs an EV3 LEGO robot to search for a certain color on a white surface bordered by black. The user can pick one color out of red, green, blue, or yellow for the robot to search. The robot will search across the white surface and turn around if it gets to the black border. Here is a &lt;a href=&quot;https://www.youtube.com/watch?v=OlD2ruKAvHg&amp;amp;feature=youtu.be&quot; target=&quot;_blank&quot;&gt;demonstration video&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://docs.google.com/document/d/1Gn8IDujPLFSffcYfSBBexP2NXBEXDMI2vZpH7u2Qjpc/edit?usp=sharing&quot;&gt;Go to tutorial&lt;/a&gt;. &lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-2&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Intermediate&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;LEGO® EV3&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Tue, 07 Mar 2017 01:04:15 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">870 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Lego EV3 Pet Robot</title>
 <link>http://explore.appinventor.mit.edu/ai2/lego-ev3-pet-robot</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;This tutorial helps you to build an app that allows the user to instruct an EV3 LEGO robot to do certain maneuvers and actions through voice commands. The user can pick one of several commands: forward, backward (reverse), stop, forward slow, forward fast, disconnect, circles, right turn (turn right), left turn (turn left). The robot will follow the user’s voice commands and perform the action for half a second before prompting the user for another command. If the user provides no commands, the previous command will be executed until another command is registered.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://docs.google.com/document/d/1Bp_iB2H71oXZDYE2DWcYdTIKalbkupVW4ZKBzFKHcKY/edit?usp=sharing&quot;&gt;Go to tutorial&lt;/a&gt;. &lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-2&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Intermediate&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;LEGO® EV3&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Tue, 07 Mar 2017 00:59:58 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">869 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>LEGO ®  EV3 Tilt-to-Drive Tutorial</title>
 <link>http://explore.appinventor.mit.edu/ai2/lego-%C2%AE-ev3-tilt-drive</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;This tutorial lets you make an app that drives around an EV3 LEGO robot by tilting a phone or tablet. Tilting forward makes the bot go forward, back --&amp;gt; back, right --&amp;gt; right, left --&amp;gt;left. A steeper pitch will make the robot drive faster… etc.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://docs.google.com/document/d/1KZF1785Kan2ZKHY90114lIXzhn-5SOX3g21h03fHRnA/edit?usp=sharing&quot;&gt;Go to tutorial&lt;/a&gt;. &lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-2&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Intermediate&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;LEGO® EV3&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 17 Jun 2016 15:13:19 +0000</pubDate>
 <dc:creator>Karen</dc:creator>
 <guid isPermaLink="false">759 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Photo Booth App</title>
 <link>http://explore.appinventor.mit.edu/ai2/photo-booth-app</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;This tutorial demonstrates how to develop a Photo Booth app. You’ll build an app that let’s you take pictures, assign pictures to canvases and share pictures via email. &lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;https://docs.google.com/document/d/1trt9smFfyiztdVoaq5ONaOM8GWOMoSFxTRJ7Eyyajuw/pub&quot;&gt;Go to Photo Booth app&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-2&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Intermediate&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Camera&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 01 May 2015 02:28:06 +0000</pubDate>
 <dc:creator>hal</dc:creator>
 <guid isPermaLink="false">584 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Oh My Spikes</title>
 <link>http://explore.appinventor.mit.edu/ai2/oh-my-spikes</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;This tutorial by Saj Dutta shows how to create a complete game from scratch.  The game is variant of the popular spikes games and uses App Inventor sprites.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.imagnity.com/android/oh-my-spikes-create-a-game-from-scratch-using-app-inventor/&quot;&gt;Go to tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-2&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Game&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Sat, 06 Sep 2014 16:38:08 +0000</pubDate>
 <dc:creator>hal</dc:creator>
 <guid isPermaLink="false">556 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Sharing Component: send files and text with the app of your choice</title>
 <link>http://explore.appinventor.mit.edu/ai2/file-sharing</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;In this &lt;strong&gt;3-minute video&lt;/strong&gt;, App Inventor Developer José Dominguez shows you how to use the File Sharing component to share text and/or files from your App Inventor app to any capable service on your device (e.g. Gmail, Twitter, G+, WhatsApp, Messaging, etc.).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/embed/fCdxtYj09Zw&quot; rel=&quot;lightframe[|width:760px; height:480px;]&quot;&gt;&lt;br /&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/file_sharing_screenshot.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-2&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Intermediate&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;File Sharing&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Tue, 22 Apr 2014 16:02:53 +0000</pubDate>
 <dc:creator>shay</dc:creator>
 <guid isPermaLink="false">505 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>QuizMe for App Inventor 2</title>
 <link>http://explore.appinventor.mit.edu/ai2/quizme</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;h4 class=&quot;ai-header&quot;&gt;What you&#039;re building&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://beta.appinventor.mit.edu/learn/tutorials/quizme/QuizMeAssets/quizOnEmulator.png&quot; style=&quot;float:right; height: 453px; width: 197px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:green;&quot;&gt;QuizMe&lt;/span&gt; is a trivia game about baseball, but you can use it as a template to build quizzes on any topic. With &lt;span style=&quot;color:green;&quot;&gt;QuizMe&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The user steps through a series of questions, clicking a button to proceed to the next question.&lt;/li&gt;
&lt;li&gt;The user enters an answer for each question and the app reports whether each answer is correct or not.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;With &lt;span style=&quot;color:green;&quot;&gt;QuizMe&lt;/span&gt;, the quiz questions are always the same unless you, the programmer, change them. Later, you can create &lt;a href=&quot;/ai2/makequiztakequiz&quot;&gt;MakeQuiz &amp;amp; TakeQuiz&lt;/a&gt;, an app that lets users of the app create and modify the quiz questions.&lt;/p&gt;
&lt;p&gt;This tutorial assumes you are familiar with the basics of App Inventor -- using the Component Designer to build a user interface, and using the Blocks Editor to specify event-handlers. If you are not familiar with the basics, try stepping through some of the &lt;a href=&quot;http://explore.appinventor.mit.edu/ai2/tutorials&quot;&gt;basic tutorials&lt;/a&gt; before continuing.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;Connect to the App Inventor web site and start a new project. Name it &lt;span style=&quot;color:green;&quot;&gt;QuizMe&lt;/span&gt;, and also set the screen&#039;s &lt;strong style=&quot;color:green;&quot;&gt;Title&lt;/strong&gt; to &quot;QuizMe&quot;. Open the Blocks Editor and connect to the phone.&lt;/p&gt;
&lt;p&gt;Also download the following pictures of baseball players and save them on your computer. Later, you&#039;ll load these images into your project.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://beta.appinventor.mit.edu/learn/tutorials/quizme/QuizMeAssets/Larsenberra.jpg&quot;&gt;Larsenberra.jpg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://beta.appinventor.mit.edu/learn/tutorials/quizme/QuizMeAssets/dallasbraden.jpg&quot;&gt;Dallasbraden.jpg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://beta.appinventor.mit.edu/learn/tutorials/quizme/QuizMeAssets/cyyoung.jpg&quot;&gt;Cyyoung.jpg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://beta.appinventor.mit.edu/learn/tutorials/quizme/QuizMeAssets/nolanryan.jpg&quot;&gt;Nolanryan.jpg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;You&#039;ll design the quiz game so that the user proceeds from question to question by clicking a Next button, and receives simple correct/incorrect feedback on each answer.&lt;/p&gt;
&lt;p&gt;This tutorial introduces:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Defining and displaying lists of information.&lt;/li&gt;
&lt;li&gt;Sequencing through a list using an index variable -- a variable that keeps track of a position in a list.&lt;/li&gt;
&lt;li&gt;Conditional behaviors-- performing certain operations only when a condition is met.&lt;/li&gt;
&lt;li&gt;Switching an image to show a different picture at different times.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Set up the Components&lt;/h4&gt;
&lt;p&gt;Use the component designer to create the interface for &lt;span style=&quot;color:green;&quot;&gt;QuizMe&lt;/span&gt;. When you finish, it should look something like the snapshot below (there are also more detailed instructions below the snapshot).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/designer.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To create this interface, first load the images you downloaded into the project. Click on the &quot;Upload File...&quot; button in the Media area and select one of the downloaded files (e.g., Larsenberra.jpg). Then do the same for the other three images.&lt;/p&gt;
&lt;p&gt;Next, create the following components by dragging them from the Palette into the Viewer and et the properties of the components as described below:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Component Type
&lt;/td&gt;
&lt;td&gt;
Palette Group
&lt;/td&gt;
&lt;td&gt;
What you&#039;ll name it
&lt;/td&gt;
&lt;td&gt;
Action
&lt;/td&gt;
&lt;td&gt;
Purpose of Component
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;strong&gt;Image&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;User Interface&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;Image1&lt;/td&gt;
&lt;td&gt;Set its &lt;span class=&quot;ButtonText&quot;&gt;Picture&lt;/span&gt; property to &quot;Larsenberra.jpg&quot;. This is the first picture that should appear.&lt;/td&gt;
&lt;td&gt;The picture part of the question&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Label&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;User Interface&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;QuestionLabel&lt;/td&gt;
&lt;td&gt;Change &lt;span class=&quot;ButtonText&quot;&gt;Text&lt;/span&gt; property to &quot;Question:&quot;&lt;/td&gt;
&lt;td&gt;Displays the current question&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;HorizontalArrangement&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Layout&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;HorizontalArrangement1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Organizes the AnswerPrompt and Text&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Label&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;User Interface&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;AnswerPromptLabel&lt;/td&gt;
&lt;td&gt;Change &lt;span class=&quot;ButtonText&quot;&gt;Text&lt;/span&gt; property to &quot;Enter Answer:&quot;. On the Viewer screen, move this label into &lt;span style=&quot;color:green;&quot;&gt;HorizontalArrangement1&lt;/span&gt;.&lt;/td&gt;
&lt;td&gt;Text prompting for an anwer&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;TextBox&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;User Interface&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;AnswerText&lt;/td&gt;
&lt;td&gt;Change &lt;span class=&quot;ButtonText&quot;&gt;Hint&lt;/span&gt; to &quot;Please Enter an Answer&quot;. On the Viewer screen, move &lt;span style=&quot;color:green;&quot;&gt;AnswerText&lt;/span&gt; into &lt;span style=&quot;color:green;&quot;&gt;HorizontalArrangement1&lt;/span&gt;.&lt;/td&gt;
&lt;td&gt;User will enter answer here.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Label&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;User Interface&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;RightWrongLabel&lt;/td&gt;
&lt;td&gt;Change &lt;span class=&quot;ButtonText&quot;&gt;Text&lt;/span&gt; property to &quot;Correct/Incorrect&quot;.&lt;/td&gt;
&lt;td&gt;Correct/Incorrect is displayed here.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;HorizontalArrangement&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Layout&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;HorizontalArrangement2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Organizes the AnswerButton and NextButton&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Button&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;User Interface&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;AnswerButton&lt;/td&gt;
&lt;td&gt;Change &lt;span class=&quot;ButtonText&quot;&gt;Text&lt;/span&gt; property to &quot;Submit&quot;. On the Viewer, move the button into &lt;span style=&quot;color:green;&quot;&gt;HorizontalArrangment2.&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;User clicks to submit an answer&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Button&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;User Interface&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;NextButton&lt;/td&gt;
&lt;td&gt;Change &lt;span class=&quot;ButtonText&quot;&gt;Text&lt;/span&gt; property to &quot;Next&quot;. Move the button into &lt;span style=&quot;color:green;&quot;&gt;HorizontalArrangement2&lt;/span&gt;.&lt;/td&gt;
&lt;td&gt;User clicks to proceed to the next answer&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Add Behaviors to the Components&lt;/h4&gt;
&lt;p&gt;Open the Blocks Editor to add the behaviors for the app. First, you&#039;ll define two list variables, &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt; to hold the list of questions, and &lt;span style=&quot;color:green;&quot;&gt;AnswerList&lt;/span&gt; to hold the list of corresponding answers.&lt;/p&gt;
&lt;p&gt;To define the two list variables, you&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;initialize global name to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;Defines the &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt; variable (rename it)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;initialize global name to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;Defines the &lt;span style=&quot;color:green;&quot;&gt;AnswerList&lt;/span&gt; variable (rename it)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock-ai2&quot;&gt;make a list&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;Used to insert the items of the &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock-ai2&quot;&gt;&quot;  &quot;&lt;/span&gt; (3 of them)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;The actual questions&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock-ai2&quot;&gt;make a list&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;Used to insert the items of the &lt;span style=&quot;color:green;&quot;&gt;AnswerList&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock-ai2&quot;&gt;&quot;  &quot;&lt;/span&gt; (3 of them)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;The actual answers&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;You create global variables by dragging in a &lt;span class=&quot;variableblock-ai2&quot;&gt;initialize global name to&lt;/span&gt; block from the Variables drawer and double-clicking the default name &quot;name&quot; to change its name. The &lt;span class=&quot;variableblock-ai2&quot;&gt;initialize global name to&lt;/span&gt; block has a slot for the initial value of the variable. The variable can represent a number or text, or even a list, for which you can plug in a &lt;span class=&quot;listblock-ai2&quot;&gt;make a list&lt;/span&gt; block into the variable definition.&lt;/p&gt;
&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/QuestionListAnswerList.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Define the Hidden Index Variable&lt;/h4&gt;
&lt;p&gt;Each time the user clicks the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt; to proceed through the quiz, the app needs to remember which question it is on. In programming, to remember something, you define a new variable.  In this case, the app needs to remember the current question number -- the index into the list &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To create the variable &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt;, you&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;initialize global name to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;Defines the &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; variable (rename it)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;mathblock-ai2&quot;&gt;0&lt;/span&gt; (1)&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;Set the initial value of &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; to 1 (renumber it)&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/index.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Display the first question&lt;/h4&gt;
&lt;p&gt;To start, you&#039;ll ignore the answers and just work on the behavior to sequence through the questions. The desired behavior is the following: when the app starts, the first question should appear in the label named &lt;span style=&quot;color:green;&quot;&gt;QuestionLabel&lt;/span&gt;. When the user clicks the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt;, the second question should appear. When the user clicks again, the third should appear. When the last question is reached, clicking the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt; should result in the first question once again appearing in the &lt;span color=&quot;color:green;&quot;&gt;QuestionLabel&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;With App Inventor, you select particular items in a list with the &lt;span class=&quot;listblock-ai2&quot;&gt;select list item&lt;/span&gt; block. The block asks you to specify the list and an index--a position in the list. If a list has three items, the indexes 1, 2, and 3 are valid.&lt;/pre&gt;&lt;p&gt;For &lt;span style=&quot;color:green;&quot;&gt;QuizMe&lt;/span&gt;, when the app starts, the app should choose the first question in the list and display it in the &lt;span style=&quot;color:green;&quot;&gt;QuestionLabel&lt;/span&gt; component.&lt;/p&gt;
&lt;p&gt;For this app initialization behavior, you&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock-ai2&quot;&gt;when Screen1.Initialize&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Screen1&lt;/td&gt;
&lt;td&gt;When the app begins, this event-handler is triggered.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setcomponent-ai2&quot;&gt;set QuestionLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;QuestionLabel&lt;/td&gt;
&lt;td&gt;Need to put the first question in &lt;span style=&quot;color:green;&quot;&gt;QuestionLabel&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock-ai2&quot;&gt;select list item&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;Need to select the first question from &lt;span style=&quot;color:green;&quot;&gt;QuestionLabel&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;get &lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;The list to select from. Select &quot;global QuestionList&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;mathblock-ai2&quot;&gt;0&lt;/span&gt; (1)&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;Select the first question by using an index of 1. Set the value to be 1.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/screenInit.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the blocks work&lt;/h4&gt;
&lt;p&gt;The &lt;span class=&quot;controlblock-ai2&quot;&gt;when Screen1.Initialize&lt;/span&gt; event is triggered when the app begins. The first item of the variable &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt; is selected and placed into &lt;span class=&quot;setcomponent-ai2&quot;&gt;set QuestionLabel.Text&lt;/span&gt;. So when the app begins, the user will see the first question.&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;strong style=&quot;color:black;&quot;&gt;Test this behavior.&lt;/strong&gt; Click &lt;span style=&quot;color:black;&quot;&gt;Connect Phone&lt;/span&gt; if your phone is not already connected. What appears on the phone? If you created the &lt;span style=&quot;color:black;&quot;&gt;QuestionList&lt;/span&gt; as described above, the first item of &lt;span style=&quot;color:black;&quot;&gt;QuestionList&lt;/span&gt;, &quot;Who pitched a perfect game in the World Series?&quot;, should appear in the &lt;span style=&quot;color:black;&quot;&gt;QuestionLabel&lt;/span&gt;.&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Iterating Through the Questions&lt;/h4&gt;
&lt;p&gt;Now program the behavior of the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt;. You&#039;ve already defined the &lt;span class=&quot;variableblock-ai2&quot;&gt;currentQuestionIndex&lt;/span&gt; to remember the question the user is on. When &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt; is clicked, the app needs to increment this variable, e.g., change it from 1 to 2 or from 2 to 3, etc., and then use the resulting value to select the new &quot;current&quot; question. For this behavior, you&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock-ai2&quot;&gt;when NextButton.Click&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;NextButton&lt;/td&gt;
&lt;td&gt;When user clicks Next, this event-handler is triggered.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;set currentQuestionIndex to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;Need to put the first question in &lt;span style=&quot;color:green;&quot;&gt;QuestionLabel&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;mathblock-ai2&quot;&gt; + &lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;Used to increment &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;get global currentQuestionIndex&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;New value will be old value + 1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;mathblock-ai2&quot;&gt;0&lt;/span&gt; (1)&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;For the + 1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setcomponent-ai2&quot;&gt;set QuestionLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;QuestionLabel&lt;/td&gt;
&lt;td&gt;Need to display the next question here&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock-ai2&quot;&gt;select list item&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;Need to select the first question from &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;get global QuestionList&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;Plug into &lt;span style=&quot;color:green;&quot;&gt;list&lt;/span&gt; slot of call select list item&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;get global currentQuestionIndex&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;Plug into &lt;span style=&quot;color:green;&quot;&gt;index&lt;/span&gt; slot of call select list item, we want nth item&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/firstNext.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;The first row of blocks increments the variable &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt;. If &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; has a 1 in it, it is changed to 2. If it has a 2, it is changed to 3, and so on. Once the &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; variable has been changed, the app uses it to select the &quot;current&quot; question.&lt;/p&gt;
&lt;p&gt;Recall that in the &lt;span class=&quot;controlblock-ai2&quot;&gt;Screen.Initialize&lt;/span&gt; event-handler, the app selected the first question to display:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/selectFirst.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt; is clicked, the app doesn&#039;t choose the first item in the list, or the 2nd or 3rd, it chooses the &lt;span class=&quot;variableblock-ai2&quot;&gt;currentQuestionIndex&lt;/span&gt;-th item.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/chooseCurrent.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The blocks are executed in a right-to-left manner. The app first evaluates the index parameter of &lt;span class=&quot;listblock-ai2&quot;&gt;select list item&lt;/span&gt;, which is the variable &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt;. The number is stored in &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; is used as the index when the select list item is executed.&lt;/p&gt;
&lt;p&gt;When the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt; is clicked for the first time, the increment blocks will set &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; from 1 to 2, so the app will select the second item from &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt;, &quot;who pitched the first perfect game of 2010?&quot;. The second time &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt; is clicked, &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; will be set from 2 to 3, and the app will select the 3rd question in the list, &quot;who pitched the first perfect game of the modern era?&quot;&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;strong style=&quot;color:black;&quot;&gt;Test this behavior.&lt;/strong&gt; Test the behavior of the &lt;span style=&quot;color:black;&quot;&gt;NextButton&lt;/span&gt; to see if the app is working correctly thus far. To test, play the role of the user and click the &lt;span style=&quot;color:black;&quot;&gt;NextButton&lt;/span&gt; on the phone. Does the phone display the second question, &quot;Who pitched the first perfect game of 2010?&quot; It should, and the third question should appear when you click the &lt;span style=&quot;color:black;&quot;&gt;NextButton&lt;/span&gt; again. If this is working, pat yourself on the back quickly, and then go on.

Try clicking the &lt;span style=&quot;color:black;&quot;&gt;NextButton&lt;/span&gt; again (a third time). You should see an error: &quot;Attempting to get item 4 of a list of length 3&quot;. The app has a bug-- do you know what the problem is?&lt;/pre&gt;&lt;p&gt;The problem with the app is that it always increments the &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; variable when the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt; is clicked.  When &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; is already 3 and the user clicks the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt;, the app changes &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; from 3 to 4, then calls select list item to get the &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt;-th , or in this case, the 4th item. Since there are only three items in the variable &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt;, Android complains.&lt;/p&gt;
&lt;p&gt;What the app needs to do is ask a question-- check a condition-- when the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt; is clicked, and execute different blocks dependending on the answer. One way to ask the question is to ask, &quot;is the variable &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; already 3?&quot; If the answer is yes, you should set &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; back to 0 so the user is taken back to the first question.&lt;/p&gt;
&lt;p&gt;You&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock-ai2&quot;&gt;if then&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;To ask if user is on last question&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;mathblock-ai2&quot;&gt; = &lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;to test if &lt;span class=&quot;listblock&quot;&gt;currentQuestionIndex&lt;/span&gt; is 3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;get global currentQuestionIndex&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;mathblock-ai2&quot;&gt; 0 &lt;/span&gt; (3)&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;3 is number of items in the list&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;set currentQuestionIndex to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;set to 0 to go back to first question&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;mathblock-ai2&quot;&gt;0&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;set to 0 because next blocks will increment to 1&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The modified &lt;span class=&quot;controlblock-ai2&quot;&gt;when NextButton.Click&lt;/span&gt; event-handler should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/nextif3.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the blocks work&lt;/h4&gt;
&lt;p&gt;When the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt; is clicked, the app first checks to see if &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; has a 3 in it. If it does, &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; is set back to 0 so that when 1 is added to it with the blocks below, it will be 1 and the quiz will loop back to display the first question. Note that only the blocks inset within the &lt;span class=&quot;controlblock-ai2&quot;&gt;if-then&lt;/span&gt; block are dependent on the condition-- the increment and set &lt;span class=&quot;setcomponent-ai2&quot;&gt;set QuestionLabel.Text to&lt;/span&gt; blocks are executed under all conditions.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;A Maintainable App: Making it Easy to Modify the Questions&lt;/h4&gt;
&lt;p&gt;Next, you&#039;ll modify the app to make it easy to add and remove elements from the list. You&#039;ll rewrite the blocks so that they&#039;ll work on any list, not just one with exactly three items. To begin, add a fourth question to &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt; and another answer into &lt;span style=&quot;color:green;&quot;&gt;AnswerList&lt;/span&gt;. To do this, you will first need to expand the number of available slots by using the mutator. For more information on how to use the mutator, &lt;a href=&quot;http://appinventor.mit.edu/explore/ai2/support/concepts/mutators&quot;&gt;click here&lt;/a&gt;. The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/listsWith4.png&quot; /&gt;&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;strong style=&quot;color:black;&quot;&gt;Test the modified app.&lt;/strong&gt; Click the &lt;span style=&quot;color:black;&quot;&gt;NextButton&lt;/span&gt; a number of times. You should see that the fourth question never appears, no matter how many times you click &lt;span style=&quot;color:black;&quot;&gt;Next&lt;/span&gt;.&lt;/pre&gt;&lt;p&gt;The problem is that the test to see if the user is on the last question is too specific: it asks if the &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; variable is 3:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/if3.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You could just change the number 3 to a 4, and the app would again work correctly. The problem with this solution, however, is that each time you modify the questions and answers, you also have to remember to make this change. Such dependencies in a computer program often lead to bugs, especially as an app grows in complexity. It&#039;s much better to set the program up so that it will work no matter how many questions there are. Such generality is even more important when the list you are working with changes dynamically, e.g., a quiz app that allows the user to add new questions.&lt;/p&gt;
&lt;p&gt;The better solution is to ask the question in a more general way. You really want to know if the current question the user is on-- the value of &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; -- is as large as the number of items in &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt;. If the app asks the question in this more general manner, it will work even when you add to or remove items from the &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt;. To modify the &lt;span class=&quot;controlblock-ai2&quot;&gt;when NextButton.Click&lt;/span&gt; event-handler you&#039;ll replace the previous test that referred directly to 3. You&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock-ai2&quot;&gt;length of list&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;asks how many items are in &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;get global QuestionList&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;put into list slot of &lt;span class=&quot;listblock-ai2&quot;&gt;length of list&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Your &lt;span class=&quot;controlblock-ai2&quot;&gt;when NextButton.Click&lt;/span&gt; event-handler should now appear as:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/nextWithLength.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;The &lt;span class=&quot;controlblock-ai2&quot;&gt;if&lt;/span&gt; now compares the &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; to the length of the &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt;. So if &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; has a 4 in it, and the length of the &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt; is 4, then the &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; will be set to 0 (and then 1 after the increment operation in the first row of blocks after the if). Note that, because the blocks no longer refer to 3 or any specific size, the behavior will work no matter how many items are in the list.&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;strong style=&quot;color:black;&quot;&gt;Test the modified behavior.&lt;/strong&gt; When you click the &lt;span style=&quot;color:black;&quot;&gt;NextButton&lt;/span&gt;, does the app now sequence through the four questions, moving to the first one after the fourth?&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Switching the Image for Each Question&lt;/h4&gt;
&lt;p&gt;The current app shows the same image, no matter what question is being asked. You can change this so an image pertaining to each question appears when the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt; is clicked. Earlier, you added four pictures as media for the project. Now, you&#039;ll create a third list, &lt;span style=&quot;color:green;&quot;&gt;PictureList&lt;/span&gt;, with the names of the image files as its items. and you&#039;ll modify the &lt;span class=&quot;controlblock-ai2&quot;&gt;when NextButton.Click&lt;/span&gt; event-handler to switch the picture each time.&lt;/p&gt;
&lt;p&gt;First, create a &lt;span style=&quot;color:green;&quot;&gt;PictureList&lt;/span&gt; and initialize it with the names of the image files. Be sure that the names are exactly the same as the names of the files that were loaded in to the media of the project. Here&#039;s how the blocks for the &lt;span style=&quot;color:green;&quot;&gt;PictureList&lt;/span&gt; should look:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/pictureList.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Next, you need to modify the &lt;span class=&quot;controlblock-ai2&quot;&gt;when NextButton.Click&lt;/span&gt; event-handler so that it modifies the picture depending on what question the user is on. If you set the &lt;strong style=&quot;color:green;&quot;&gt;Image.Picture&lt;/strong&gt; property to a file name of an image that has been loaded, that image will appear. To modify &lt;span class=&quot;controlblock-ai2&quot;&gt;when NextButton.Click&lt;/span&gt;, you&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setcomponent-ai2&quot;&gt;set Image1.Picture to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Image1&lt;/td&gt;
&lt;td&gt;set this to change the picture&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock-ai2&quot;&gt;select list item&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;need to select the picture corresponding to current question&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;get global PictureList&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;select a file name from this list&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;get global currentQuestionIndex&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;select the &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt;-th item&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Here is how the blocks should look:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/nextWithImageSwitch.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;The &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; serves as the index for the &lt;span style=&quot;color:green;&quot;&gt;QuestionList&lt;/span&gt; and the &lt;span style=&quot;color:green;&amp;gt;PictureList&amp;lt;/span&amp;gt;. When &amp;lt;span style=&quot; color:green=&quot;&quot;&gt;currentQuestionIndex&lt;/span&gt; is 1, the app selects the first question and the first picture. When &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; is 2, the app selects the second question and second picture. Of course this scheme depends on the lists being in sync and indeed they are. For instance, the first picture, LarsenBerra.jpg, is a picture of Don Larsen, and Don Larsen is the answer to the first question, &quot;Who pitched a perfect game in the World Series?&quot; Test the modified behavior. Does a different image appear each time you click the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt;?&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Evaluating Answers&lt;/h4&gt;
&lt;p&gt;Next, you&#039;ll add blocks that report whether the user has answered a question correctly or not. The user enters the answer in &lt;span style=&quot;color:green;&quot;&gt;AnswerText&lt;/span&gt; and then clicks the &lt;span style=&quot;color:green;&quot;&gt;AnswerButton&lt;/span&gt;. The app must compare the user&#039;s entry with the answer to the &quot;current&quot; question, using an &lt;span class=&quot;controlblock-ai2&quot;&gt;if then&lt;/span&gt; block to check. The &lt;span style=&quot;color:green;&quot;&gt;RightWrongLabel&lt;/span&gt; should be modified to report whether or not the answer is correct. You&#039;ll need the following blocks for this behavior:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock-ai2&quot;&gt;when AnswerButton.Click&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;AnswerButton&lt;/td&gt;
&lt;td&gt;the behavior is triggered when user clicks the &lt;span style=&quot;color:green;&quot;&gt;AnswerButton&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock-ai2&quot;&gt;if then&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;Use the mutator to add an else. If answer is correct, do one thing, else do another&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;mathblock-ai2&quot;&gt; = &lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;to ask if answer is correct&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;getcomponent-ai2&quot;&gt;AnswerText.Text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;AnswerText&lt;/td&gt;
&lt;td&gt;the user&#039;s answer is in this textbox&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock-ai2&quot;&gt;select list item&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;to select the current answer from &lt;span style=&quot;color:green;&quot;&gt;AnswerList&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;get global AnswerList&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;The list to select from&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;variableblock-ai2&quot;&gt;get global currentQuestionIndex&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;the question number (and answer number) the user is on&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setcomponent-ai2&quot;&gt;set RightWrongLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;RightWrongLabel&lt;/td&gt;
&lt;td&gt;report the answer here&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock-ai2&quot;&gt;&quot; &quot;&lt;/span&gt; &quot;Correct!&quot;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;if answer is right&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setcomponent-ai2&quot;&gt;set RightWrongLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;RightWrongLabel&lt;/td&gt;
&lt;td&gt;report the answer here&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock-ai2&quot;&gt;&quot; &quot;&lt;/span&gt; &quot;Incorrect&quot;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;if answer is wrong&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/answerButton.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;The &lt;span class=&quot;controlblock-ai2&quot;&gt;if&lt;/span&gt; test reads, &quot;is the user&#039;s answer (&lt;strong style=&quot;color:green;&quot;&gt;AnswerText.Text&lt;/strong&gt;) equal to the &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt;-th item in the &lt;span style=&quot;color:green;&quot;&gt;AnswerList&lt;/span&gt;?&quot; If &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; is 1, the app will compare the user&#039;s answer with the first item in &lt;span style=&quot;color:green;&quot;&gt;AnswerList&lt;/span&gt;, &quot;Don Larsen&quot;. If &lt;span style=&quot;color:green;&quot;&gt;currentQuestionIndex&lt;/span&gt; is 2, the app will compare the user&#039;s answer with the second answer in the list, &quot;Dallas Braden&quot;, and so on. If the test result is positive, the &lt;span class=&quot;controlblock-ai2&quot;&gt;then&lt;/span&gt; blocks are executed and the &lt;span style=&quot;color:green;&quot;&gt;RightWrongLabel&lt;/span&gt; is set to &quot;Correct!&quot;. If the test is false, the &lt;span class=&quot;controlblock-ai2&quot;&gt;else&lt;/span&gt; blocks are executed and the &lt;span style=&quot;color:green;&quot;&gt;RightWrongLabel&lt;/span&gt; is set to &quot;Incorrect&quot;.&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;strong style=&quot;color:black;&quot;&gt;Test the modified app.&lt;/strong&gt; Try answering one of the questions. It should report whether or not you answered the question exactly as is specified in the &lt;span style=&quot;color:black;&quot;&gt;AnswerList&lt;/span&gt;. Test with both a correct and incorrect answer (because text is being compared, the test is case-sensitive).

Click the &lt;span style=&quot;color:black;&quot;&gt;NextButton&lt;/span&gt; and answer a second question. Does it still work? It should, but you might notice that when you click the &lt;span style=&quot;color:black;&quot;&gt;NextButton&lt;/span&gt;, the &quot;correct&quot;/&quot;incorrect&quot; text and the previous answer are still there. Though it&#039;s fairly innocuous, such user interface issues will definitely be noticed by the users of your app.&lt;/pre&gt;&lt;p&gt;To blank out the &lt;span style=&quot;color:green;&quot;&gt;RightWrongLabel&lt;/span&gt; and the &lt;span style=&quot;color:green;&quot;&gt;AnswerText&lt;/span&gt;, you&#039;ll put the following blocks within the &lt;span class=&quot;controlblock-ai2&quot;&gt;when NextButton.click&lt;/span&gt; event-handler:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setcomponent-ai2&quot;&gt;set RightWrongLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;RightWrongLabel&lt;/td&gt;
&lt;td&gt;the label to blank out&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock-ai2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;When &lt;span style=&quot;color:green;&quot;&gt;Next&lt;/span&gt; is clicked, erase old answer critique&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setcomponent-ai2&quot;&gt;set AnswerText.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;AnswerText&lt;/td&gt;
&lt;td&gt;the user&#039;s answer from previous question&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock-ai2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;When &lt;span style=&quot;color:green;&quot;&gt;Next&lt;/span&gt; is clicked, erase old answer&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/nextButtonFinal.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;When the &lt;span style=&quot;color:green;&quot;&gt;NextButton&lt;/span&gt; is clicked, the user is moving on to the next question, so the top two rows of the event-handler blank out the &lt;span style=&quot;color:green;&quot;&gt;RightWrongLabel&lt;/span&gt; and the &lt;span style=&quot;color:green;&quot;&gt;AnswerText&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;strong style=&quot;color:black;&quot;&gt;Test this behavior.&lt;/strong&gt; Answer a question and click &lt;span style=&quot;color;black;&quot;&gt;Submit&lt;/span&gt;, then click the &lt;span style=&quot;color:black;&quot;&gt;NextButton&lt;/span&gt;. Does your previous answer and the apps critique disappear?&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Final Program&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:green;&quot;&gt;QuizMe&lt;/span&gt;! Final Version:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/quizmeFinal.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Package the final version of the app by choosing &lt;strong&gt;Build | App (provide QR code for .apk)&lt;/strong&gt; from the Component Designer menu. When the barcode appears, use the barcode scanner on your phone to download and install the app.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Variations&lt;/h4&gt;
&lt;p&gt;Once you get a quiz working, you might want to explore some variations. For example,&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Instead of just showing images for each question, try playing a sound clip or a short video. With sound, you can turn your quiz app into a &lt;span style=&quot;color:green;&quot;&gt;Name That Tune&lt;/span&gt; app.&lt;/li&gt;
&lt;li&gt;The quiz is very rigid in terms of what is accepted as a valid answer. There are a number of ways to modify this. One is to use the text.contains block to see if the user&#039;s answer is contained in the actual answer. Another is to provide multiple answers for each question, and check by iterating (using &lt;span class=&quot;controlblock-ai2&quot;&gt;for each&lt;/span&gt;) through them to see if any match.&lt;/li&gt;
&lt;li&gt;Transform the quiz so that it is multiple-choice. The list of answers will need to be a list of lists, with each sub-list holding the answer choices. Use the &lt;strong&gt;ListPicker&lt;/strong&gt; component to allow the user to choose an answer.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Review&lt;/h4&gt;
&lt;p&gt;Here are some of the ideas covered in this tutorial:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Apps can be written in a general manner so that they work with any data list.&lt;/li&gt;
&lt;li&gt;Index variables are used to track the current position within a list. When you increment them, be careful about reaching the end of the list.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Scan the Sample App to your Phone&lt;/h4&gt;
&lt;p&gt;Scan the following barcode onto your phone to install and run the sample app. (or tap on the barcode if you&#039;re viewing this webpage on an Android device)
&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/sites/all/files/ai2tutorials/QuizMe/QuizMe_MIT.apk&quot;&gt;&lt;img src=&quot;/sites/all/files/ai2tutorials/QuizMe/QuizMeBarcode.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Download Source Code&lt;/h4&gt;
&lt;p&gt;If you&#039;d like to work with this sample in App Inventor, download the &lt;a href=&quot;/sites/all/files/ai2tutorials/QuizMe/QuizMe_MIT.aia&quot;&gt;source code&lt;/a&gt; to your computer, then open App Inventor, go to the My Projects page, and choose &lt;b&gt;Project | Import project (.aia) from my computer ...&lt;/b&gt;.&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;MIT and Google are grateful to &lt;a href=&quot;http://www.appinventor.org/&quot;&gt;Professor David Wolber&lt;/a&gt;, CS Professor at The University of San Francisco, for developing this tutorial.

Done with &lt;span style=&quot;color:black;&quot;&gt;QuizMe&lt;/span&gt;? Return to the other tutorials &lt;a href=&quot;http://explore.appinventor.mit.edu/ai2/tutorials&quot;&gt;here&lt;/a&gt;.&lt;/pre&gt;&lt;style&gt;&lt;/style&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-2&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Intermediate&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Mon, 14 Apr 2014 17:33:28 +0000</pubDate>
 <dc:creator>emily_c</dc:creator>
 <guid isPermaLink="false">504 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>No Text While Driving for AI2</title>
 <link>http://explore.appinventor.mit.edu/no-text-while-driving-ai2</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;img style=&quot;float:right;width:25%;height:25%&quot; src=&quot;http://www.appinventor.org/apps2/notext/hero.png&quot; /&gt;&lt;br /&gt;
This tutorial, available on our partner site Appinventor.org, will demonstrate how to respond to an incoming text by sending an automatic text response, and also using Text-to-Speech to read the message out loud. &lt;/p&gt;
&lt;p&gt;The following link will open a new window and take you away from MIT&#039;s site.&lt;br /&gt;&lt;a href=&quot;http://www.appinventor.org/notext-steps&quot;&gt;http://www.appinventor.org/notext-steps&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-2&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Intermediate&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;SMS Texting&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Tue, 08 Apr 2014 18:10:12 +0000</pubDate>
 <dc:creator>shay</dc:creator>
 <guid isPermaLink="false">502 at http://explore.appinventor.mit.edu</guid>
</item>
</channel>
</rss>
